// Generated by CoffeeScript 2.6.1
(function() {
  var context, indexCard, process, winning;

  context = {
    cards: []
  };

  process = function() {
    var readline, rl, state;
    state = {
      type: 'init'
    };
    readline = require('readline');
    process = require('process');
    rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    rl.on('close', function() {
      console.log(context);
      console.log(context.cards[1]);
      return console.log(winning(indexCard(context.cards[0]), context.draws));
    });
    return rl.on('line', function(line) {
      var sanitized;
      switch (state.type) {
        case 'init':
          sanitized = line.split(",");
          context.draws = sanitized;
          return state = {
            type: 'skip'
          };
        case 'skip':
          return state = {
            type: 'card',
            line: 1
          };
        case 'card':
          sanitized = line.split(" ").filter(function(elt) {
            return elt !== '';
          });
          switch (state.line) {
            case 1:
              context.cards.push([sanitized]);
              return state.line = state.line + 1;
            case 2:
            case 3:
            case 4:
              context.cards.at(-1).push(sanitized);
              return state.line = state.line + 1;
            case 5:
              context.cards.at(-1).push(sanitized);
              return state = {
                type: 'skip'
              };
          }
      }
    });
  };

  indexCard = function(card) {
    console.log(card);
    return card.reduce(function(locs, row, ridx) {
      console.log(row);
      row.reduce(function(l, elt, cidx) {
        l[elt] = {
          row: ridx,
          col: cidx
        };
        console.log(l);
        return l;
      }, locs);
      return locs;
    }, {});
  };

  winning = function(indexedCard, draws) {
    var cols, i, j, k, rows, step;
    cols = {};
    rows = {};
    for (k = i = 0; i <= 4; k = ++i) {
      rows[k] = new Set();
    }
    for (k = j = 0; j <= 4; k = ++j) {
      cols[k] = new Set();
    }
    step = function(draw, rest) {
      var coord;
      console.log(rest === []);
      if (rest === []) {
        return false;
      }
      console.log("foo");
      coord = indexedCard[draw];
      console.log(coord);
      if (coord != null) {
        rows[coord.row].add(coord.col);
        cols[coord.col].add(coord.row);
      }
      return step(rest.shift(), rest);
    };
    return step(draws.shift(), draws);
  };

  process();

}).call(this);
